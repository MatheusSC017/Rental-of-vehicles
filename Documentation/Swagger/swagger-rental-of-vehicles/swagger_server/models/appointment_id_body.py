# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AppointmentIdBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, vehicle: str=None, client: str=None, appointment_date: str=None, requested_days: int=None, rent_deposit: float=None, driver: List[str]=None, additional_items: List[object]=None):  # noqa: E501
        """AppointmentIdBody - a model defined in Swagger

        :param vehicle: The vehicle of this AppointmentIdBody.  # noqa: E501
        :type vehicle: str
        :param client: The client of this AppointmentIdBody.  # noqa: E501
        :type client: str
        :param appointment_date: The appointment_date of this AppointmentIdBody.  # noqa: E501
        :type appointment_date: str
        :param requested_days: The requested_days of this AppointmentIdBody.  # noqa: E501
        :type requested_days: int
        :param rent_deposit: The rent_deposit of this AppointmentIdBody.  # noqa: E501
        :type rent_deposit: float
        :param driver: The driver of this AppointmentIdBody.  # noqa: E501
        :type driver: List[str]
        :param additional_items: The additional_items of this AppointmentIdBody.  # noqa: E501
        :type additional_items: List[object]
        """
        self.swagger_types = {
            'vehicle': str,
            'client': str,
            'appointment_date': str,
            'requested_days': int,
            'rent_deposit': float,
            'driver': List[str],
            'additional_items': List[object]
        }

        self.attribute_map = {
            'vehicle': 'vehicle',
            'client': 'client',
            'appointment_date': 'appointment_date',
            'requested_days': 'requested_days',
            'rent_deposit': 'rent_deposit',
            'driver': 'driver',
            'additional_items': 'additional_items'
        }
        self._vehicle = vehicle
        self._client = client
        self._appointment_date = appointment_date
        self._requested_days = requested_days
        self._rent_deposit = rent_deposit
        self._driver = driver
        self._additional_items = additional_items

    @classmethod
    def from_dict(cls, dikt) -> 'AppointmentIdBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The appointment_id_body of this AppointmentIdBody.  # noqa: E501
        :rtype: AppointmentIdBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vehicle(self) -> str:
        """Gets the vehicle of this AppointmentIdBody.


        :return: The vehicle of this AppointmentIdBody.
        :rtype: str
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle: str):
        """Sets the vehicle of this AppointmentIdBody.


        :param vehicle: The vehicle of this AppointmentIdBody.
        :type vehicle: str
        """

        self._vehicle = vehicle

    @property
    def client(self) -> str:
        """Gets the client of this AppointmentIdBody.


        :return: The client of this AppointmentIdBody.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client: str):
        """Sets the client of this AppointmentIdBody.


        :param client: The client of this AppointmentIdBody.
        :type client: str
        """

        self._client = client

    @property
    def appointment_date(self) -> str:
        """Gets the appointment_date of this AppointmentIdBody.


        :return: The appointment_date of this AppointmentIdBody.
        :rtype: str
        """
        return self._appointment_date

    @appointment_date.setter
    def appointment_date(self, appointment_date: str):
        """Sets the appointment_date of this AppointmentIdBody.


        :param appointment_date: The appointment_date of this AppointmentIdBody.
        :type appointment_date: str
        """

        self._appointment_date = appointment_date

    @property
    def requested_days(self) -> int:
        """Gets the requested_days of this AppointmentIdBody.


        :return: The requested_days of this AppointmentIdBody.
        :rtype: int
        """
        return self._requested_days

    @requested_days.setter
    def requested_days(self, requested_days: int):
        """Sets the requested_days of this AppointmentIdBody.


        :param requested_days: The requested_days of this AppointmentIdBody.
        :type requested_days: int
        """

        self._requested_days = requested_days

    @property
    def rent_deposit(self) -> float:
        """Gets the rent_deposit of this AppointmentIdBody.


        :return: The rent_deposit of this AppointmentIdBody.
        :rtype: float
        """
        return self._rent_deposit

    @rent_deposit.setter
    def rent_deposit(self, rent_deposit: float):
        """Sets the rent_deposit of this AppointmentIdBody.


        :param rent_deposit: The rent_deposit of this AppointmentIdBody.
        :type rent_deposit: float
        """

        self._rent_deposit = rent_deposit

    @property
    def driver(self) -> List[str]:
        """Gets the driver of this AppointmentIdBody.


        :return: The driver of this AppointmentIdBody.
        :rtype: List[str]
        """
        return self._driver

    @driver.setter
    def driver(self, driver: List[str]):
        """Sets the driver of this AppointmentIdBody.


        :param driver: The driver of this AppointmentIdBody.
        :type driver: List[str]
        """

        self._driver = driver

    @property
    def additional_items(self) -> List[object]:
        """Gets the additional_items of this AppointmentIdBody.


        :return: The additional_items of this AppointmentIdBody.
        :rtype: List[object]
        """
        return self._additional_items

    @additional_items.setter
    def additional_items(self, additional_items: List[object]):
        """Sets the additional_items of this AppointmentIdBody.


        :param additional_items: The additional_items of this AppointmentIdBody.
        :type additional_items: List[object]
        """

        self._additional_items = additional_items
