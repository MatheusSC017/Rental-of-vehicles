# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.customer_user import CustomerUser  # noqa: F401,E501
from swagger_server import util


class Customer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cpf: str=None, user: CustomerUser=None, rg: str=None, gender: str=None, age: int=None, phone: str=None, cnh: str=None, finance: float=None, address: int=None):  # noqa: E501
        """Customer - a model defined in Swagger

        :param cpf: The cpf of this Customer.  # noqa: E501
        :type cpf: str
        :param user: The user of this Customer.  # noqa: E501
        :type user: CustomerUser
        :param rg: The rg of this Customer.  # noqa: E501
        :type rg: str
        :param gender: The gender of this Customer.  # noqa: E501
        :type gender: str
        :param age: The age of this Customer.  # noqa: E501
        :type age: int
        :param phone: The phone of this Customer.  # noqa: E501
        :type phone: str
        :param cnh: The cnh of this Customer.  # noqa: E501
        :type cnh: str
        :param finance: The finance of this Customer.  # noqa: E501
        :type finance: float
        :param address: The address of this Customer.  # noqa: E501
        :type address: int
        """
        self.swagger_types = {
            'cpf': str,
            'user': CustomerUser,
            'rg': str,
            'gender': str,
            'age': int,
            'phone': str,
            'cnh': str,
            'finance': float,
            'address': int
        }

        self.attribute_map = {
            'cpf': 'cpf',
            'user': 'user',
            'rg': 'rg',
            'gender': 'gender',
            'age': 'age',
            'phone': 'phone',
            'cnh': 'cnh',
            'finance': 'finance',
            'address': 'address'
        }
        self._cpf = cpf
        self._user = user
        self._rg = rg
        self._gender = gender
        self._age = age
        self._phone = phone
        self._cnh = cnh
        self._finance = finance
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpf(self) -> str:
        """Gets the cpf of this Customer.


        :return: The cpf of this Customer.
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf: str):
        """Sets the cpf of this Customer.


        :param cpf: The cpf of this Customer.
        :type cpf: str
        """

        self._cpf = cpf

    @property
    def user(self) -> CustomerUser:
        """Gets the user of this Customer.


        :return: The user of this Customer.
        :rtype: CustomerUser
        """
        return self._user

    @user.setter
    def user(self, user: CustomerUser):
        """Sets the user of this Customer.


        :param user: The user of this Customer.
        :type user: CustomerUser
        """

        self._user = user

    @property
    def rg(self) -> str:
        """Gets the rg of this Customer.


        :return: The rg of this Customer.
        :rtype: str
        """
        return self._rg

    @rg.setter
    def rg(self, rg: str):
        """Sets the rg of this Customer.


        :param rg: The rg of this Customer.
        :type rg: str
        """

        self._rg = rg

    @property
    def gender(self) -> str:
        """Gets the gender of this Customer.


        :return: The gender of this Customer.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Customer.


        :param gender: The gender of this Customer.
        :type gender: str
        """

        self._gender = gender

    @property
    def age(self) -> int:
        """Gets the age of this Customer.


        :return: The age of this Customer.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Customer.


        :param age: The age of this Customer.
        :type age: int
        """

        self._age = age

    @property
    def phone(self) -> str:
        """Gets the phone of this Customer.


        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Customer.


        :param phone: The phone of this Customer.
        :type phone: str
        """

        self._phone = phone

    @property
    def cnh(self) -> str:
        """Gets the cnh of this Customer.


        :return: The cnh of this Customer.
        :rtype: str
        """
        return self._cnh

    @cnh.setter
    def cnh(self, cnh: str):
        """Sets the cnh of this Customer.


        :param cnh: The cnh of this Customer.
        :type cnh: str
        """

        self._cnh = cnh

    @property
    def finance(self) -> float:
        """Gets the finance of this Customer.


        :return: The finance of this Customer.
        :rtype: float
        """
        return self._finance

    @finance.setter
    def finance(self, finance: float):
        """Sets the finance of this Customer.


        :param finance: The finance of this Customer.
        :type finance: float
        """

        self._finance = finance

    @property
    def address(self) -> int:
        """Gets the address of this Customer.


        :return: The address of this Customer.
        :rtype: int
        """
        return self._address

    @address.setter
    def address(self, address: int):
        """Sets the address of this Customer.


        :param address: The address of this Customer.
        :type address: int
        """

        self._address = address
