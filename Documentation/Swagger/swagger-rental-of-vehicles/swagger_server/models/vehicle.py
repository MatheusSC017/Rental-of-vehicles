# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Vehicle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, brand: str=None, model: str=None, year_manufacture: int=None, model_year: int=None, mileage: float=None, renavam: str=None, license_plate: str=None, chassi: str=None, fuel: str=None, fuel_tank: int=None, engine: str=None, color: str=None, other_data: object=None, available: bool=None, branch: int=None, classification: int=None):  # noqa: E501
        """Vehicle - a model defined in Swagger

        :param type: The type of this Vehicle.  # noqa: E501
        :type type: str
        :param brand: The brand of this Vehicle.  # noqa: E501
        :type brand: str
        :param model: The model of this Vehicle.  # noqa: E501
        :type model: str
        :param year_manufacture: The year_manufacture of this Vehicle.  # noqa: E501
        :type year_manufacture: int
        :param model_year: The model_year of this Vehicle.  # noqa: E501
        :type model_year: int
        :param mileage: The mileage of this Vehicle.  # noqa: E501
        :type mileage: float
        :param renavam: The renavam of this Vehicle.  # noqa: E501
        :type renavam: str
        :param license_plate: The license_plate of this Vehicle.  # noqa: E501
        :type license_plate: str
        :param chassi: The chassi of this Vehicle.  # noqa: E501
        :type chassi: str
        :param fuel: The fuel of this Vehicle.  # noqa: E501
        :type fuel: str
        :param fuel_tank: The fuel_tank of this Vehicle.  # noqa: E501
        :type fuel_tank: int
        :param engine: The engine of this Vehicle.  # noqa: E501
        :type engine: str
        :param color: The color of this Vehicle.  # noqa: E501
        :type color: str
        :param other_data: The other_data of this Vehicle.  # noqa: E501
        :type other_data: object
        :param available: The available of this Vehicle.  # noqa: E501
        :type available: bool
        :param branch: The branch of this Vehicle.  # noqa: E501
        :type branch: int
        :param classification: The classification of this Vehicle.  # noqa: E501
        :type classification: int
        """
        self.swagger_types = {
            'type': str,
            'brand': str,
            'model': str,
            'year_manufacture': int,
            'model_year': int,
            'mileage': float,
            'renavam': str,
            'license_plate': str,
            'chassi': str,
            'fuel': str,
            'fuel_tank': int,
            'engine': str,
            'color': str,
            'other_data': object,
            'available': bool,
            'branch': int,
            'classification': int
        }

        self.attribute_map = {
            'type': 'type',
            'brand': 'brand',
            'model': 'model',
            'year_manufacture': 'year_manufacture',
            'model_year': 'model_year',
            'mileage': 'mileage',
            'renavam': 'renavam',
            'license_plate': 'license_plate',
            'chassi': 'chassi',
            'fuel': 'fuel',
            'fuel_tank': 'fuel_tank',
            'engine': 'engine',
            'color': 'color',
            'other_data': 'other_data',
            'available': 'available',
            'branch': 'branch',
            'classification': 'classification'
        }
        self._type = type
        self._brand = brand
        self._model = model
        self._year_manufacture = year_manufacture
        self._model_year = model_year
        self._mileage = mileage
        self._renavam = renavam
        self._license_plate = license_plate
        self._chassi = chassi
        self._fuel = fuel
        self._fuel_tank = fuel_tank
        self._engine = engine
        self._color = color
        self._other_data = other_data
        self._available = available
        self._branch = branch
        self._classification = classification

    @classmethod
    def from_dict(cls, dikt) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vehicle of this Vehicle.  # noqa: E501
        :rtype: Vehicle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Vehicle.


        :return: The type of this Vehicle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Vehicle.


        :param type: The type of this Vehicle.
        :type type: str
        """

        self._type = type

    @property
    def brand(self) -> str:
        """Gets the brand of this Vehicle.


        :return: The brand of this Vehicle.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand: str):
        """Sets the brand of this Vehicle.


        :param brand: The brand of this Vehicle.
        :type brand: str
        """

        self._brand = brand

    @property
    def model(self) -> str:
        """Gets the model of this Vehicle.


        :return: The model of this Vehicle.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Vehicle.


        :param model: The model of this Vehicle.
        :type model: str
        """

        self._model = model

    @property
    def year_manufacture(self) -> int:
        """Gets the year_manufacture of this Vehicle.


        :return: The year_manufacture of this Vehicle.
        :rtype: int
        """
        return self._year_manufacture

    @year_manufacture.setter
    def year_manufacture(self, year_manufacture: int):
        """Sets the year_manufacture of this Vehicle.


        :param year_manufacture: The year_manufacture of this Vehicle.
        :type year_manufacture: int
        """

        self._year_manufacture = year_manufacture

    @property
    def model_year(self) -> int:
        """Gets the model_year of this Vehicle.


        :return: The model_year of this Vehicle.
        :rtype: int
        """
        return self._model_year

    @model_year.setter
    def model_year(self, model_year: int):
        """Sets the model_year of this Vehicle.


        :param model_year: The model_year of this Vehicle.
        :type model_year: int
        """

        self._model_year = model_year

    @property
    def mileage(self) -> float:
        """Gets the mileage of this Vehicle.


        :return: The mileage of this Vehicle.
        :rtype: float
        """
        return self._mileage

    @mileage.setter
    def mileage(self, mileage: float):
        """Sets the mileage of this Vehicle.


        :param mileage: The mileage of this Vehicle.
        :type mileage: float
        """

        self._mileage = mileage

    @property
    def renavam(self) -> str:
        """Gets the renavam of this Vehicle.


        :return: The renavam of this Vehicle.
        :rtype: str
        """
        return self._renavam

    @renavam.setter
    def renavam(self, renavam: str):
        """Sets the renavam of this Vehicle.


        :param renavam: The renavam of this Vehicle.
        :type renavam: str
        """

        self._renavam = renavam

    @property
    def license_plate(self) -> str:
        """Gets the license_plate of this Vehicle.


        :return: The license_plate of this Vehicle.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate: str):
        """Sets the license_plate of this Vehicle.


        :param license_plate: The license_plate of this Vehicle.
        :type license_plate: str
        """

        self._license_plate = license_plate

    @property
    def chassi(self) -> str:
        """Gets the chassi of this Vehicle.


        :return: The chassi of this Vehicle.
        :rtype: str
        """
        return self._chassi

    @chassi.setter
    def chassi(self, chassi: str):
        """Sets the chassi of this Vehicle.


        :param chassi: The chassi of this Vehicle.
        :type chassi: str
        """

        self._chassi = chassi

    @property
    def fuel(self) -> str:
        """Gets the fuel of this Vehicle.


        :return: The fuel of this Vehicle.
        :rtype: str
        """
        return self._fuel

    @fuel.setter
    def fuel(self, fuel: str):
        """Sets the fuel of this Vehicle.


        :param fuel: The fuel of this Vehicle.
        :type fuel: str
        """

        self._fuel = fuel

    @property
    def fuel_tank(self) -> int:
        """Gets the fuel_tank of this Vehicle.


        :return: The fuel_tank of this Vehicle.
        :rtype: int
        """
        return self._fuel_tank

    @fuel_tank.setter
    def fuel_tank(self, fuel_tank: int):
        """Sets the fuel_tank of this Vehicle.


        :param fuel_tank: The fuel_tank of this Vehicle.
        :type fuel_tank: int
        """

        self._fuel_tank = fuel_tank

    @property
    def engine(self) -> str:
        """Gets the engine of this Vehicle.


        :return: The engine of this Vehicle.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine: str):
        """Sets the engine of this Vehicle.


        :param engine: The engine of this Vehicle.
        :type engine: str
        """

        self._engine = engine

    @property
    def color(self) -> str:
        """Gets the color of this Vehicle.


        :return: The color of this Vehicle.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this Vehicle.


        :param color: The color of this Vehicle.
        :type color: str
        """

        self._color = color

    @property
    def other_data(self) -> object:
        """Gets the other_data of this Vehicle.


        :return: The other_data of this Vehicle.
        :rtype: object
        """
        return self._other_data

    @other_data.setter
    def other_data(self, other_data: object):
        """Sets the other_data of this Vehicle.


        :param other_data: The other_data of this Vehicle.
        :type other_data: object
        """

        self._other_data = other_data

    @property
    def available(self) -> bool:
        """Gets the available of this Vehicle.


        :return: The available of this Vehicle.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available: bool):
        """Sets the available of this Vehicle.


        :param available: The available of this Vehicle.
        :type available: bool
        """

        self._available = available

    @property
    def branch(self) -> int:
        """Gets the branch of this Vehicle.


        :return: The branch of this Vehicle.
        :rtype: int
        """
        return self._branch

    @branch.setter
    def branch(self, branch: int):
        """Sets the branch of this Vehicle.


        :param branch: The branch of this Vehicle.
        :type branch: int
        """

        self._branch = branch

    @property
    def classification(self) -> int:
        """Gets the classification of this Vehicle.


        :return: The classification of this Vehicle.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification: int):
        """Sets the classification of this Vehicle.


        :param classification: The classification of this Vehicle.
        :type classification: int
        """

        self._classification = classification
