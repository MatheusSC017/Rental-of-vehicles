# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdditionalItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, daily_cost: float=None, stock: int=0, branch: int=None):  # noqa: E501
        """AdditionalItem - a model defined in Swagger

        :param name: The name of this AdditionalItem.  # noqa: E501
        :type name: str
        :param daily_cost: The daily_cost of this AdditionalItem.  # noqa: E501
        :type daily_cost: float
        :param stock: The stock of this AdditionalItem.  # noqa: E501
        :type stock: int
        :param branch: The branch of this AdditionalItem.  # noqa: E501
        :type branch: int
        """
        self.swagger_types = {
            'name': str,
            'daily_cost': float,
            'stock': int,
            'branch': int
        }

        self.attribute_map = {
            'name': 'name',
            'daily_cost': 'daily_cost',
            'stock': 'stock',
            'branch': 'branch'
        }
        self._name = name
        self._daily_cost = daily_cost
        self._stock = stock
        self._branch = branch

    @classmethod
    def from_dict(cls, dikt) -> 'AdditionalItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdditionalItem of this AdditionalItem.  # noqa: E501
        :rtype: AdditionalItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AdditionalItem.


        :return: The name of this AdditionalItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AdditionalItem.


        :param name: The name of this AdditionalItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def daily_cost(self) -> float:
        """Gets the daily_cost of this AdditionalItem.


        :return: The daily_cost of this AdditionalItem.
        :rtype: float
        """
        return self._daily_cost

    @daily_cost.setter
    def daily_cost(self, daily_cost: float):
        """Sets the daily_cost of this AdditionalItem.


        :param daily_cost: The daily_cost of this AdditionalItem.
        :type daily_cost: float
        """
        if daily_cost is None:
            raise ValueError("Invalid value for `daily_cost`, must not be `None`")  # noqa: E501

        self._daily_cost = daily_cost

    @property
    def stock(self) -> int:
        """Gets the stock of this AdditionalItem.


        :return: The stock of this AdditionalItem.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock: int):
        """Sets the stock of this AdditionalItem.


        :param stock: The stock of this AdditionalItem.
        :type stock: int
        """

        self._stock = stock

    @property
    def branch(self) -> int:
        """Gets the branch of this AdditionalItem.


        :return: The branch of this AdditionalItem.
        :rtype: int
        """
        return self._branch

    @branch.setter
    def branch(self, branch: int):
        """Sets the branch of this AdditionalItem.


        :param branch: The branch of this AdditionalItem.
        :type branch: int
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")  # noqa: E501

        self._branch = branch
